import yt_dlp
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from pathlib import Path
import threading
from PIL import Image, ImageTk
import requests
from io import BytesIO
import re
import webbrowser


class StableYouTubeDownloader:
    def __init__(self, root):
        self.root = root
        self.root.title("YouTube Downloader")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)

        # –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.current_language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        self.translations = self.get_translations()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        self.dark_mode = True
        self.colors = self.get_dark_theme()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.download_path = os.path.join(os.path.expanduser("~"), "YouTubeDownloads")
        Path(self.download_path).mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.create_scrollable_interface()

    def get_translations(self):
        """–°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        return {
            "ru": {
                "title": "üé¨ YouTube Video Downloader",
                "subtitle": "–°–∫–∞—á–∏–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ",
                "donate": "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
                "dark_theme": "üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                "light_theme": "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                "language": "üåê –Ø–∑—ã–∫",
                "url_section": " üì• –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ",
                "url_placeholder": "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É YouTube...",
                "paste": "üìã –í—Å—Ç–∞–≤–∏—Ç—å",
                "clear": "üßπ –û—á–∏—Å—Ç–∏—Ç—å",
                "settings": " ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏",
                "format": "–§–æ—Ä–º–∞—Ç:",
                "format_mp4": "MP4 (–í–∏–¥–µ–æ)",
                "format_mp3": "MP3 (–ê—É–¥–∏–æ)",
                "quality": "–ö–∞—á–µ—Å—Ç–≤–æ:",
                "quality_480": "480p",
                "quality_720": "720p HD",
                "quality_best": "–õ—É—á—à–µ–µ",
                "folder": "–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
                "download_btn": "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                "open_folder": "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É",
                "progress": " üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏",
                "ready": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "logs": " üìù –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π",
                "preview": " üëÄ –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ",
                "preview_text": "–ü—Ä–µ–≤—å—é –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å\n–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏",
                "video_title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
                "duration": "‚è±Ô∏è --:--",
                "quality_label": "üìä –ö–∞—á–µ—Å—Ç–≤–æ: --",
                "loading_info": "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                "loading_preview": "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é...",
                "ready_download": "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ",
                "clipboard_error": "–ù–µ–≤–µ—Ä–Ω–∞—è YouTube —Å—Å—ã–ª–∫–∞ –≤ –±—É—Ñ–µ—Ä–µ",
                "clipboard_access": "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É",
                "field_cleared": "üßπ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ",
                "folder_selected": "üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
                "folder_opened": "üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏",
                "folder_not_exists": "–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                "download_started": "üöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É...",
                "download_in_progress": "üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...",
                "download_complete": "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                "download_success": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ:",
                "download_error": "‚ùå –û—à–∏–±–∫–∞:",
                "error_url": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ!",
                "error_valid_url": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube!",
                "success_title": "–£—Å–ø–µ—Ö",
                "success_message": "–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!",
                "error_title": "–û—à–∏–±–∫–∞",
                "error_message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:",
                "thanks_donation": "‚òï –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤...",
                "preview_unavailable": "–ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                "unknown_duration": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "unknown_quality": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "no_title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            },
            "en": {
                "title": "üé¨ YouTube Video Downloader",
                "subtitle": "Download videos quickly and easily",
                "donate": "‚òï Support Developer",
                "dark_theme": "üåô Dark Theme",
                "light_theme": "‚òÄÔ∏è Light Theme",
                "language": "üåê Language",
                "url_section": " üì• Video URL",
                "url_placeholder": "Paste YouTube link...",
                "paste": "üìã Paste",
                "clear": "üßπ Clear",
                "settings": " ‚öôÔ∏è Download Settings",
                "format": "Format:",
                "format_mp4": "MP4 (Video)",
                "format_mp3": "MP3 (Audio)",
                "quality": "Quality:",
                "quality_480": "480p",
                "quality_720": "720p HD",
                "quality_best": "Best",
                "folder": "Save Folder:",
                "download_btn": "‚¨áÔ∏è Download Video",
                "open_folder": "üìÇ Open Folder",
                "progress": " üìä Download Progress",
                "ready": "Ready to work",
                "logs": " üìù Event Log",
                "preview": " üëÄ Video Preview",
                "preview_text": "Preview will appear here\nafter entering URL",
                "video_title": "Video Title",
                "duration": "‚è±Ô∏è --:--",
                "quality_label": "üìä Quality: --",
                "loading_info": "üîÑ Loading information...",
                "loading_preview": "üîÑ Loading preview...",
                "ready_download": "‚úÖ Ready to download",
                "clipboard_error": "Invalid YouTube link in clipboard",
                "clipboard_access": "Clipboard access error",
                "field_cleared": "üßπ Input field cleared",
                "folder_selected": "üìÅ Save folder:",
                "folder_opened": "üìÇ Downloads folder opened",
                "folder_not_exists": "Folder does not exist",
                "download_started": "üöÄ Starting download...",
                "download_in_progress": "üì• Starting video download...",
                "download_complete": "‚úÖ Download complete!",
                "download_success": "‚úÖ Successfully downloaded:",
                "download_error": "‚ùå Error:",
                "error_url": "Enter YouTube video URL!",
                "error_valid_url": "Enter valid YouTube URL!",
                "success_title": "Success",
                "success_message": "Video downloaded!",
                "error_title": "Error",
                "error_message": "Failed to download video:",
                "thanks_donation": "‚òï Thank you for support! Opening donation link...",
                "preview_unavailable": "Preview unavailable",
                "unknown_duration": "Unknown",
                "unknown_quality": "Unknown",
                "no_title": "No title"
            }
        }

    def t(self, key):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É"""
        return self.translations[self.current_language].get(key, key)

    def get_dark_theme(self):
        """–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"""
        return {
            'bg_primary': '#1a1a1a',
            'bg_secondary': '#2d2d2d',
            'bg_card': '#3a3a3a',
            'accent': '#ff4757',
            'accent_hover': '#ff6b81',
            'text_primary': '#ffffff',
            'text_secondary': '#b0b0b0',
            'text_muted': '#666666',
            'border': '#555555',
            'success': '#2ed573',
            'warning': '#ffa502',
            'error': '#ff4757'
        }

    def get_light_theme(self):
        """–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞"""
        return {
            'bg_primary': '#f5f5f5',
            'bg_secondary': '#ffffff',
            'bg_card': '#e9ecef',
            'accent': '#007bff',
            'accent_hover': '#0056b3',
            'text_primary': '#212529',
            'text_secondary': '#6c757d',
            'text_muted': '#adb5bd',
            'border': '#dee2e6',
            'success': '#28a745',
            'warning': '#ffc107',
            'error': '#dc3545'
        }

    def create_scrollable_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_container = tk.Frame(self.root, bg=self.colors['bg_primary'])
        main_container.pack(fill='both', expand=True)

        # –°–æ–∑–¥–∞–µ–º canvas –∏ scrollbar
        self.canvas = tk.Canvas(main_container, bg=self.colors['bg_primary'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_container, orient='vertical', command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg=self.colors['bg_primary'])

        self.scrollable_frame.bind(
            '<Configure>',
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox('all'))
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor='nw')
        self.canvas.configure(yscrollcommand=scrollbar.set)

        # –£–ø–∞–∫–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas.pack(side='left', fill='both', expand=True, padx=15)
        scrollbar.pack(side='right', fill='y')

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –∫–æ –≤—Å–µ–º—É canvas
        self.bind_mousewheel(self.canvas)
        self.bind_mousewheel(self.scrollable_frame)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_stable_interface()

    def bind_mousewheel(self, widget):
        """–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –∫ –≤–∏–¥–∂–µ—Ç—É –∏ –≤—Å–µ–º –µ–≥–æ –ø–æ—Ç–æ–º–∫–∞–º"""
        widget.bind('<MouseWheel>', self._on_mousewheel)
        for child in widget.winfo_children():
            self.bind_mousewheel(child)

    def _on_mousewheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏"""
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), 'units')

    def create_stable_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ –ø–ª–∞–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_header_with_controls(self.scrollable_frame)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = tk.Frame(self.scrollable_frame, bg=self.colors['bg_primary'])
        content_frame.pack(fill='both', expand=True, pady=15)

        # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        left_column = tk.Frame(content_frame, bg=self.colors['bg_primary'], width=500)
        left_column.pack(side='left', fill='both', expand=True)

        right_column = tk.Frame(content_frame, bg=self.colors['bg_primary'], width=350)
        right_column.pack(side='right', fill='y')
        right_column.pack_propagate(False)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        self.create_url_section(left_column)
        self.create_settings_section(left_column)
        self.create_actions_section(left_column)
        self.create_progress_section(left_column)
        self.create_logs_section(left_column)
        self.create_preview_section(right_column)

    def create_header_with_controls(self, parent):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ–Ω–∞—Ç, —Ç–µ–º–∞, —è–∑—ã–∫)"""
        header_frame = tk.Frame(parent, bg=self.colors['bg_primary'])
        header_frame.pack(fill='x', pady=(0, 20))

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        top_row = tk.Frame(header_frame, bg=self.colors['bg_primary'])
        top_row.pack(fill='x')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = tk.Label(top_row,
                                    text=self.t("title"),
                                    font=('Arial', 20, 'bold'),
                                    bg=self.colors['bg_primary'],
                                    fg=self.colors['text_primary'])
        self.title_label.pack(side='left')

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = tk.Frame(top_row, bg=self.colors['bg_primary'])
        controls_frame.pack(side='right')

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        self.language_btn = tk.Button(controls_frame,
                                      text=f"{'RU' if self.current_language == 'ru' else 'EN'}",
                                      command=self.toggle_language,
                                      bg=self.colors['bg_secondary'],
                                      fg=self.colors['text_primary'],
                                      font=('Arial', 9, 'bold'),
                                      relief='solid',
                                      bd=1,
                                      padx=12,
                                      pady=5,
                                      width=4)
        self.language_btn.pack(side='right', padx=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_btn = tk.Button(controls_frame,
                                   text="üåô" if self.dark_mode else "‚òÄÔ∏è",
                                   command=self.toggle_theme,
                                   bg=self.colors['bg_secondary'],
                                   fg=self.colors['text_primary'],
                                   font=('Arial', 9),
                                   relief='solid',
                                   bd=1,
                                   padx=8,
                                   pady=5,
                                   width=3)
        self.theme_btn.pack(side='right', padx=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤
        self.donation_btn = tk.Button(controls_frame,
                                      text=self.t("donate"),
                                      command=self.open_donation_link,
                                      bg='#FF6B35',
                                      fg='white',
                                      font=('Arial', 9, 'bold'),
                                      relief='solid',
                                      bd=1,
                                      padx=12,
                                      pady=5)
        self.donation_btn.pack(side='right', padx=(5, 0))

        self.subtitle_label = tk.Label(header_frame,
                                       text=self.t("subtitle"),
                                       font=('Arial', 11),
                                       bg=self.colors['bg_primary'],
                                       fg=self.colors['text_secondary'])
        self.subtitle_label.pack(pady=(5, 0))

    def toggle_language(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
        self.current_language = "en" if self.current_language == "ru" else "ru"
        self.update_language()

    def update_language(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        self.language_btn.config(text='RU' if self.current_language == 'ru' else 'EN')
        self.theme_btn.config(text="üåô" if self.dark_mode else "‚òÄÔ∏è")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.config(text=self.t("title"))
        self.subtitle_label.config(text=self.t("subtitle"))
        self.donation_btn.config(text=self.t("donate"))

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        self.create_stable_interface()

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–æ–π"""
        self.dark_mode = not self.dark_mode
        self.colors = self.get_dark_theme() if self.dark_mode else self.get_light_theme()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.update_theme()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        self.theme_btn.config(
            text="üåô" if self.dark_mode else "‚òÄÔ∏è",
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary']
        )

    def update_theme(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ –Ω–æ–≤—É—é —Ç–µ–º—É"""
        # –§–æ–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.configure(bg=self.colors['bg_primary'])
        self.canvas.configure(bg=self.colors['bg_primary'])
        self.scrollable_frame.configure(bg=self.colors['bg_primary'])

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        self.create_stable_interface()

    def open_donation_link(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤"""
        donation_url = "https://dalink.to/elys_cc"
        webbrowser.open(donation_url)
        self.log_message(self.t("thanks_donation"))

    def create_url_section(self, parent):
        """–°–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞ URL"""
        self.url_frame = tk.LabelFrame(parent,
                                       text=self.t("url_section"),
                                       font=('Arial', 11, 'bold'),
                                       bg=self.colors['bg_primary'],
                                       fg=self.colors['text_primary'],
                                       padx=15,
                                       pady=15)
        self.url_frame.pack(fill='x', pady=10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.url_var = tk.StringVar()
        self.url_entry = tk.Entry(self.url_frame,
                                  textvariable=self.url_var,
                                  bg=self.colors['bg_secondary'],
                                  fg=self.colors['text_primary'],
                                  font=('Arial', 11),
                                  relief='solid',
                                  bd=1)
        self.url_entry.pack(fill='x', pady=10, ipady=8)
        self.url_entry.insert(0, self.t("url_placeholder"))
        self.url_entry.bind('<KeyRelease>', self.on_url_change)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(self.url_frame, bg=self.colors['bg_primary'])
        btn_frame.pack(fill='x')

        self.paste_btn = tk.Button(btn_frame,
                                   text=self.t("paste"),
                                   command=self.paste_url,
                                   bg=self.colors['bg_secondary'],
                                   fg=self.colors['text_primary'],
                                   font=('Arial', 9),
                                   relief='solid',
                                   bd=1)
        self.paste_btn.pack(side='left', padx=(0, 10))

        self.clear_btn = tk.Button(btn_frame,
                                   text=self.t("clear"),
                                   command=self.clear_url,
                                   bg=self.colors['bg_secondary'],
                                   fg=self.colors['text_primary'],
                                   font=('Arial', 9),
                                   relief='solid',
                                   bd=1)
        self.clear_btn.pack(side='left')

    def create_settings_section(self, parent):
        """–°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings_frame = tk.LabelFrame(parent,
                                            text=self.t("settings"),
                                            font=('Arial', 11, 'bold'),
                                            bg=self.colors['bg_primary'],
                                            fg=self.colors['text_primary'],
                                            padx=15,
                                            pady=15)
        self.settings_frame.pack(fill='x', pady=10)

        # –§–æ—Ä–º–∞—Ç
        format_frame = tk.Frame(self.settings_frame, bg=self.colors['bg_primary'])
        format_frame.pack(fill='x', pady=8)

        tk.Label(format_frame,
                 text=self.t("format"),
                 bg=self.colors['bg_primary'],
                 fg=self.colors['text_primary'],
                 font=('Arial', 10)).pack(anchor='w')

        self.format_var = tk.StringVar(value="mp4")
        format_btn_frame = tk.Frame(format_frame, bg=self.colors['bg_primary'])
        format_btn_frame.pack(fill='x', pady=5)

        self.mp4_radio = tk.Radiobutton(format_btn_frame,
                                        text=self.t("format_mp4"),
                                        variable=self.format_var,
                                        value="mp4",
                                        bg=self.colors['bg_primary'],
                                        fg=self.colors['text_primary'],
                                        selectcolor=self.colors['accent'])
        self.mp4_radio.pack(side='left', padx=(0, 15))

        self.mp3_radio = tk.Radiobutton(format_btn_frame,
                                        text=self.t("format_mp3"),
                                        variable=self.format_var,
                                        value="mp3",
                                        bg=self.colors['bg_primary'],
                                        fg=self.colors['text_primary'],
                                        selectcolor=self.colors['accent'])
        self.mp3_radio.pack(side='left')

        # –ö–∞—á–µ—Å—Ç–≤–æ
        quality_frame = tk.Frame(self.settings_frame, bg=self.colors['bg_primary'])
        quality_frame.pack(fill='x', pady=8)

        tk.Label(quality_frame,
                 text=self.t("quality"),
                 bg=self.colors['bg_primary'],
                 fg=self.colors['text_primary'],
                 font=('Arial', 10)).pack(anchor='w')

        self.quality_var = tk.StringVar(value="720p")
        quality_btn_frame = tk.Frame(quality_frame, bg=self.colors['bg_primary'])
        quality_btn_frame.pack(fill='x', pady=5)

        qualities = [
            (self.t("quality_480"), "480p"),
            (self.t("quality_720"), "720p"),
            (self.t("quality_best"), "best")
        ]

        self.quality_radios = []
        for text, value in qualities:
            radio = tk.Radiobutton(quality_btn_frame,
                                   text=text,
                                   variable=self.quality_var,
                                   value=value,
                                   bg=self.colors['bg_primary'],
                                   fg=self.colors['text_primary'],
                                   selectcolor=self.colors['accent'])
            radio.pack(side='left', padx=(0, 15))
            self.quality_radios.append(radio)

        # –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        folder_frame = tk.Frame(self.settings_frame, bg=self.colors['bg_primary'])
        folder_frame.pack(fill='x', pady=8)

        tk.Label(folder_frame,
                 text=self.t("folder"),
                 bg=self.colors['bg_primary'],
                 fg=self.colors['text_primary'],
                 font=('Arial', 10)).pack(anchor='w')

        folder_input_frame = tk.Frame(folder_frame, bg=self.colors['bg_primary'])
        folder_input_frame.pack(fill='x', pady=5)

        self.folder_var = tk.StringVar(value=self.download_path)
        self.folder_entry = tk.Entry(folder_input_frame,
                                     textvariable=self.folder_var,
                                     bg=self.colors['bg_secondary'],
                                     fg=self.colors['text_primary'],
                                     font=('Arial', 9),
                                     relief='solid',
                                     bd=1)
        self.folder_entry.pack(side='left', fill='x', expand=True, ipady=4)

        self.folder_btn = tk.Button(folder_input_frame,
                                    text="üìÅ",
                                    command=self.browse_folder,
                                    bg=self.colors['bg_secondary'],
                                    fg=self.colors['text_primary'],
                                    font=('Arial', 9),
                                    relief='solid',
                                    bd=1,
                                    width=3)
        self.folder_btn.pack(side='right', padx=(5, 0))

    def create_actions_section(self, parent):
        """–°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_frame = tk.Frame(parent, bg=self.colors['bg_primary'])
        actions_frame.pack(fill='x', pady=10)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.download_btn = tk.Button(actions_frame,
                                      text=self.t("download_btn"),
                                      command=self.start_download,
                                      bg=self.colors['accent'],
                                      fg='white',
                                      font=('Arial', 12, 'bold'),
                                      relief='solid',
                                      bd=1,
                                      padx=30,
                                      pady=12)
        self.download_btn.pack(side='left', padx=(0, 15))

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
        self.open_folder_btn = tk.Button(actions_frame,
                                         text=self.t("open_folder"),
                                         command=self.open_download_folder,
                                         bg=self.colors['bg_secondary'],
                                         fg=self.colors['text_primary'],
                                         font=('Arial', 10),
                                         relief='solid',
                                         bd=1,
                                         padx=20,
                                         pady=10)
        self.open_folder_btn.pack(side='left')

    def create_progress_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_frame = tk.LabelFrame(parent,
                                            text=self.t("progress"),
                                            font=('Arial', 11, 'bold'),
                                            bg=self.colors['bg_primary'],
                                            fg=self.colors['text_primary'],
                                            padx=15,
                                            pady=15)
        self.progress_frame.pack(fill='x', pady=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(self.progress_frame,
                                        mode='indeterminate',
                                        length=100)
        self.progress.pack(fill='x', pady=10)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(self.progress_frame,
                                     text=self.t("ready"),
                                     bg=self.colors['bg_primary'],
                                     fg=self.colors['text_secondary'],
                                     font=('Arial', 9))
        self.status_label.pack()

    def create_logs_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ª–æ–≥–æ–≤"""
        self.logs_frame = tk.LabelFrame(parent,
                                        text=self.t("logs"),
                                        font=('Arial', 11, 'bold'),
                                        bg=self.colors['bg_primary'],
                                        fg=self.colors['text_primary'],
                                        padx=15,
                                        pady=15)
        self.logs_frame.pack(fill='both', expand=True, pady=10)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_container = tk.Frame(self.logs_frame, bg=self.colors['bg_secondary'])
        log_container.pack(fill='both', expand=True)

        self.log_text = tk.Text(log_container,
                                height=8,
                                bg=self.colors['bg_secondary'],
                                fg=self.colors['text_primary'],
                                font=('Consolas', 9),
                                relief='solid',
                                bd=1,
                                wrap='word')

        scrollbar = ttk.Scrollbar(log_container, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)

        self.log_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

    def create_preview_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø—Ä–µ–≤—å—é"""
        self.preview_frame = tk.LabelFrame(parent,
                                           text=self.t("preview"),
                                           font=('Arial', 11, 'bold'),
                                           bg=self.colors['bg_primary'],
                                           fg=self.colors['text_primary'],
                                           padx=15,
                                           pady=15)
        self.preview_frame.pack(fill='both', pady=10)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        thumbnail_container = tk.Frame(self.preview_frame,
                                       bg=self.colors['border'],
                                       height=150,
                                       relief='solid',
                                       bd=1)
        thumbnail_container.pack(fill='x', pady=10)
        thumbnail_container.pack_propagate(False)

        self.thumbnail_label = tk.Label(thumbnail_container,
                                        text=self.t("preview_text"),
                                        bg=self.colors['border'],
                                        fg=self.colors['text_muted'],
                                        justify='center',
                                        font=('Arial', 10))
        self.thumbnail_label.pack(expand=True)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        info_frame = tk.Frame(self.preview_frame, bg=self.colors['bg_primary'])
        info_frame.pack(fill='x', pady=5)

        self.video_title = tk.Label(info_frame,
                                    text=self.t("video_title"),
                                    bg=self.colors['bg_primary'],
                                    fg=self.colors['text_primary'],
                                    font=('Arial', 10, 'bold'),
                                    wraplength=320,
                                    justify='center')
        self.video_title.pack(fill='x', pady=(0, 5))

        meta_frame = tk.Frame(info_frame, bg=self.colors['bg_primary'])
        meta_frame.pack(fill='x')

        self.video_duration = tk.Label(meta_frame,
                                       text=self.t("duration"),
                                       bg=self.colors['bg_primary'],
                                       fg=self.colors['text_secondary'],
                                       font=('Arial', 9))
        self.video_duration.pack(side='left')

        self.video_quality = tk.Label(meta_frame,
                                      text=self.t("quality_label"),
                                      bg=self.colors['bg_primary'],
                                      fg=self.colors['text_secondary'],
                                      font=('Arial', 9))
        self.video_quality.pack(side='right')

    def on_url_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL"""
        url = self.url_var.get().strip()
        if url and url != self.t("url_placeholder") and self.is_valid_youtube_url(url):
            self.status_label.config(text=self.t("loading_info"))
            threading.Thread(target=self.fetch_video_info, args=(url,), daemon=True).start()

    def is_valid_youtube_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ YouTube URL"""
        patterns = [
            r'(https?://)?(www\.)?youtube\.com/watch\?v=[\w-]+',
            r'(https?://)?(www\.)?youtu\.be/[\w-]+',
            r'(https?://)?(www\.)?youtube\.com/embed/[\w-]+',
            r'(https?://)?(www\.)?youtube\.com/shorts/[\w-]+'
        ]
        return any(re.match(pattern, url) for pattern in patterns)

    def fetch_video_info(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        try:
            self.root.after(0, lambda: self.thumbnail_label.config(text=self.t("loading_preview")))

            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)

                thumbnail_url = info.get('thumbnail', '')
                title = info.get('title', self.t("no_title"))
                duration = self.format_duration(info.get('duration', 0))
                quality = info.get('format_note', self.t("unknown_quality"))

                if thumbnail_url:
                    response = requests.get(thumbnail_url, timeout=10)
                    image = Image.open(BytesIO(response.content))
                    image.thumbnail((300, 150), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(image)

                    self.root.after(0, lambda: self.update_preview(photo, title, duration, quality))
                else:
                    self.root.after(0, lambda: self.update_preview(None, title, duration, quality))

        except Exception as e:
            self.root.after(0, lambda: self.show_error(f"{self.t('download_error')} {str(e)}"))

    def update_preview(self, photo, title, duration, quality):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é"""
        if photo:
            self.thumbnail_label.configure(image=photo, text="")
            self.thumbnail_label.image = photo
        else:
            self.thumbnail_label.config(image='', text=self.t("preview_unavailable"))

        self.video_title.config(text=title)
        self.video_duration.config(text=f"‚è±Ô∏è {duration}")
        self.video_quality.config(text=f"üìä {quality}")
        self.status_label.config(text=self.t("ready_download"))
        self.log_message(f"‚úÖ {self.t('download_success')} {title}")

    def format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not seconds:
            return self.t("unknown_duration")

        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60

        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        else:
            return f"{minutes:02d}:{seconds:02d}"

    def paste_url(self):
        """–í—Å—Ç–∞–≤–∫–∞ URL –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            clipboard_content = self.root.clipboard_get()
            if self.is_valid_youtube_url(clipboard_content):
                self.url_entry.delete(0, tk.END)
                self.url_entry.insert(0, clipboard_content)
                self.log_message("üìã " + (
                    "–°—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞" if self.current_language == "ru" else "Link pasted from clipboard"))
                self.on_url_change()
            else:
                self.show_warning(self.t("clipboard_error"))
        except:
            self.show_error(self.t("clipboard_access"))

    def clear_url(self):
        """–û—á–∏—Å—Ç–∫–∞ URL"""
        self.url_entry.delete(0, tk.END)
        self.url_entry.insert(0, self.t("url_placeholder"))
        self.thumbnail_label.config(image='', text=self.t("preview_text"))
        self.video_title.config(text=self.t("video_title"))
        self.video_duration.config(text=self.t("duration"))
        self.video_quality.config(text=self.t("quality_label"))
        self.status_label.config(text=self.t("ready"))
        self.log_message(self.t("field_cleared"))

    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = filedialog.askdirectory(initialdir=self.download_path)
        if folder:
            self.folder_var.set(folder)
            self.download_path = folder
            self.log_message(f"üìÅ {self.t('folder_selected')} {folder}")

    def open_download_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏"""
        if os.path.exists(self.download_path):
            try:
                os.startfile(self.download_path)
                self.log_message(self.t("folder_opened"))
            except:
                import subprocess
                import platform
                system = platform.system()
                if system == "Darwin":
                    subprocess.run(["open", self.download_path])
                elif system == "Linux":
                    subprocess.run(["xdg-open", self.download_path])
        else:
            self.show_warning(self.t("folder_not_exists"))

    def start_download(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        url = self.url_var.get().strip()

        if not url or url == self.t("url_placeholder"):
            self.show_error(self.t("error_url"))
            return

        if not self.is_valid_youtube_url(url):
            self.show_error(self.t("error_valid_url"))
            return

        self.log_message(self.t("download_started"))
        thread = threading.Thread(target=self.download_video, args=(url,))
        thread.daemon = True
        thread.start()

    def download_video(self, url):
        """–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            self.root.after(0, self.on_download_start)

            format_type = self.format_var.get()
            quality = self.quality_var.get()

            ydl_opts = {
                'outtmpl': os.path.join(self.download_path, '%(title)s.%(ext)s'),
                'retries': 5,
                'fragment_retries': 5,
            }

            if format_type == "mp4":
                if quality == "480p":
                    ydl_opts['format'] = 'best[height<=480]/best[ext=mp4]/best'
                elif quality == "720p":
                    ydl_opts['format'] = 'best[height<=720]/best[ext=mp4]/best'
                else:
                    ydl_opts['format'] = 'best[ext=mp4]/best'
            else:
                ydl_opts.update({
                    'format': 'bestaudio/best',
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }],
                })

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                title = info.get('title', self.t("no_title"))

                self.root.after(0, lambda: self.on_download_success(title))

        except Exception as e:
            self.root.after(0, lambda: self.on_download_error(str(e)))

    def on_download_start(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.download_btn.config(state='disabled')
        self.progress.start()
        self.status_label.config(
            text="üîÑ " + ("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞..." if self.current_language == "ru" else "Downloading..."))
        self.log_message(self.t("download_in_progress"))

    def on_download_success(self, title):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ"""
        self.download_btn.config(state='normal')
        self.progress.stop()
        self.status_label.config(text=self.t("download_complete"))
        self.log_message(f"‚úÖ {self.t('download_success')} {title}")
        messagebox.showinfo(self.t("success_title"), f"{self.t('success_message')}\n\n{title}")

    def on_download_error(self, error):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.download_btn.config(state='normal')
        self.progress.stop()
        self.status_label.config(text="‚ùå " + ("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" if self.current_language == "ru" else "Download error"))
        self.log_message(f"‚ùå {self.t('download_error')} {error}")
        messagebox.showerror(self.t("error_title"), f"{self.t('error_message')}\n{error}")

    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.log_message(f"‚ùå {message}")
        self.status_label.config(text="‚ùå " + ("–û—à–∏–±–∫–∞" if self.current_language == "ru" else "Error"))
        messagebox.showerror(self.t("error_title"), message)

    def show_warning(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.log_message(f"‚ö†Ô∏è {message}")
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ" if self.current_language == "ru" else "Warning", message)


def main():
    root = tk.Tk()
    app = StableYouTubeDownloader(root)
    root.mainloop()


if __name__ == '__main__':
    main()